module Data.Woot.WChar
    ( WChar(..)
    , wCharBeginning
    , wCharEnding
    , isBeginningChar
    , isEndingChar
    , hide
    , ClientId
    , WCharId(..)
    ) where


data WCharSpecial = WCharBeginning | WCharEnding deriving (Eq, Show)


data WChar = WChar
    { wCharId      :: WCharId
    , wCharVisible :: Bool
    , wCharAlpha   :: Char
    , wCharPrevId  :: WCharId
    , wCharNextId  :: WCharId
    , wCharSpecial :: Maybe WCharSpecial
    } deriving (Eq, Show)


-- special character to mark the beginning of a wString
-- note: clientId of -1 denotes a special character generated by this library
wCharBeginning :: WChar
wCharBeginning = WChar (WCharId (-1) 0) True ' ' (WCharId (-1) 0)
    (WCharId (-1) 1) (Just WCharBeginning)


-- special character to mark the ending of a wString
-- note: clientId of -1 denotes a special character generated by this library
wCharEnding :: WChar
wCharEnding = WChar (WCharId (-1) 1) True ' ' (WCharId (-1) 0)
    (WCharId (-1) 1) (Just WCharEnding)


isBeginningChar :: WChar -> Bool
isBeginningChar = (== Just WCharBeginning) . wCharSpecial


isEndingChar :: WChar -> Bool
isEndingChar = (== Just WCharEnding) . wCharSpecial


hide :: WChar -> WChar
hide wc = wc {wCharVisible = False}


type ClientId = Int


data WCharId = WCharId
    { wCharIdClientId :: ClientId
    , wCharIdClock    :: Int
    } deriving (Eq, Show)


instance Ord WCharId where
    compare = compareCharIds


compareCharIds :: WCharId -> WCharId -> Ordering
compareCharIds (WCharId cA iA) (WCharId cB iB) = compare (cA, iA) (cB, iB)
